/*
    * => Universal Selector which selects every element in the page.
    box-sizing: inherit; => forces inheritance for this property. By default it is not inherited.
    *::after,*::before => We want all after and before virtual elements will use these definations.
*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

/*
    Root font size, which will be used in all "rem" decleration calculations, is set in html selector.
    font-size: 62.5%; => %62.5 of default font size of the browser. If the user hasn't changed, it is usually 16px and so 16*%62.5 = 10px.
 */
html {
  font-size: 62.5%; }

body {
  box-sizing: border-box; }

/*
    font properties are usually inherited. So thet will be inherited to all elements in the body. Thats why we define font properties in body
    To Use Lato font we have included it from google fonts in index.html => <link href="https://fonts.googleapis.com/css?family=Lato:100,300,400,700,900" rel="stylesheet">
    line-heignt: 1.7; => 1.7 times of the default value.
    box-sizing: border-box; => Since we put "box-sizing-inherit in the * selector, all the elements inside body will be inherited from this decleration.
    box-sizing: border-box => borders and the paddings are no more added to the total width and total hight for a specified box
*/
body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /*font-size: 16px;*/
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

/*
  To center a text, put it into a div and use an utitiltiy class, who has a single goal, which is to center the text inside
 */
.u-center-text {
  text-align: center !important; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem !important; }

.u-margin-bottom-medium {
  margin-bottom: 4rem !important; }

.u-margin-bottom-big {
  margin-bottom: 8rem !important; }

.u-margin-top-big {
  margin-top: 8rem !important; }

.u-margin-top-huge {
  margin-top: 10rem !important; }

/*
    margin: 0 auto; =>  When we use auto, left and right margins will be same. so the element will be centered.
    &:not(:last-child) { => if it is not the last child element, then it will be selected.
    width: calc((100% - 6rem) / 2); => we need to use calc() because they will be calculated after compiled to css.
                        we also have to use # in calc() function if we use a sass variable.
    @include clearfix; => Since all of the elements of div are floated, the div has 0 height. In order to fix it we use clearfix.
                        will be compiled as .row::after {........}
 */
.row {
  max-width: 114rem;
  margin: 0 auto;
  /*
  attribute selector,
      [class^="col-"] => all the elements who has a class attribute starting with "col-".
                          ^= means the attribute starts with "col-"
                          *= means the attribute contains "col-"
                          $= means the attribute ends with "col-"
                          we can also use src, etc.
  */ }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }

.section-card {
  position: relative;
  padding: 15rem 0; }

.card {
  width: 75%;
  margin: 0 auto;
  box-shadow: 0 3rem 6rem rgba(0, 0, 0, 0.1);
  background-color: rgba(255, 255, 255, 0.6);
  border-radius: 3px;
  padding: 6rem;
  padding-left: 9rem;
  font-size: 1.6rem;
  transform: skewX(-12deg);
  /*
        shape-outside: circle(50% at 50% 50%); => The image will be inside a circle.
                It will work if only it is floated and it has width and height
        clip-path: circle(50% at 50% 50%);
        float: left; => Image will floated to left and other content (text here) will be floated around the circle
     */
  /*
        filter: blur(3px) brightness(80%); => filter images
     */ }
  .card__shape {
    width: 15rem;
    height: 15rem;
    float: left;
    -webkit-shape-outside: circle(50% at 50% 50%);
    shape-outside: circle(50% at 50% 50%);
    -webkit-clip-path: circle(50% at 50% 50%);
    clip-path: circle(50% at 50% 50%);
    transform: translateX(-3rem) skewX(12deg);
    position: relative; }
  .card__img {
    height: 100%;
    transform: translateX(-4rem) scale(1.4);
    backface-visibility: hidden;
    transition: all .5s; }
  .card__text {
    transform: skewX(12deg); }
  .card__caption {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, 20%);
    color: #fff;
    text-transform: uppercase;
    font-size: 1.7rem;
    text-align: center;
    opacity: 0;
    transition: all .5s;
    backface-visibility: hidden; }
  .card:hover .card__caption {
    opacity: 1;
    transform: translate(-50%, -50%); }
  .card:hover .card__img {
    transform: translateX(-4rem) scale(1);
    filter: blur(3px) brightness(80%); }
