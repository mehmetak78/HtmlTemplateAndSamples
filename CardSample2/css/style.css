/*
    * => Universal Selector which selects every element in the page.
    box-sizing: inherit; => forces inheritance for this property. By default it is not inherited.
    *::after,*::before => We want all after and before virtual elements will use these definations.
*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

/*
    Root font size, which will be used in all "rem" decleration calculations, is set in html selector.
    font-size: 62.5%; => %62.5 of default font size of the browser. If the user hasn't changed, it is usually 16px and so 16*%62.5 = 10px.
 */
html {
  font-size: 62.5%; }

body {
  box-sizing: border-box; }

/*
    font properties are usually inherited. So thet will be inherited to all elements in the body. Thats why we define font properties in body
    To Use Lato font we have included it from google fonts in index.html => <link href="https://fonts.googleapis.com/css?family=Lato:100,300,400,700,900" rel="stylesheet">
    line-heignt: 1.7; => 1.7 times of the default value.
    box-sizing: border-box; => Since we put "box-sizing-inherit in the * selector, all the elements inside body will be inherited from this decleration.
    box-sizing: border-box => borders and the paddings are no more added to the total width and total hight for a specified box
*/
body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 1.6rem;
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

/*
  To center a text, put it into a div and use an utitiltiy class, who has a single goal, which is to center the text inside
 */
.u-center-text {
  text-align: center !important; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem !important; }

.u-margin-bottom-medium {
  margin-bottom: 4rem !important; }

.u-margin-bottom-big {
  margin-bottom: 8rem !important; }

.u-margin-top-big {
  margin-top: 8rem !important; }

.u-margin-top-huge {
  margin-top: 10rem !important; }

/*
    margin: 0 auto; =>  When we use auto, left and right margins will be same. so the element will be centered.
    &:not(:last-child) { => if it is not the last child element, then it will be selected.
    width: calc((100% - 6rem) / 2); => we need to use calc() because they will be calculated after compiled to css.
                        we also have to use # in calc() function if we use a sass variable.
    @include clearfix; => Since all of the elements of div are floated, the div has 0 height. In order to fix it we use clearfix.
                        will be compiled as .row::after {........}
 */
.row {
  max-width: 114rem;
  margin: 0 auto;
  /*
  attribute selector,
      [class^="col-"] => all the elements who has a class attribute starting with "col-".
                          ^= means the attribute starts with "col-"
                          *= means the attribute contains "col-"
                          $= means the attribute ends with "col-"
                          we can also use src, etc.
  */ }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }

.section-features {
  padding: 10rem 0;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../../img/nat-4.jpg);
  background-size: cover;
  transform: skewY(-7deg);
  margin-top: 5rem;
  /*
      & > * { => Selects all direct children of parent. Not the children of childrens'
   */ }
  .section-features > * {
    transform: skewY(7deg); }

.btn {
  /*
        .btn:link => link is a sudo class. Sudo classes are special states of a selector.
        .btn:visited => Another sudo class. ex: First the color is black but after once clicked to the link it is blue.
        display: inline-block; Since thhe btn element was a simple test it was inline, so we change the display to inline-block
                inline-block : inline in width, block in height.
                You should always do that if you use padding, heights, widths
        This is the properties for initial state
        transition: all .2s => Shortens all the transitions to .2 seconds.
    */
  /*.btn, .btn:link, .btn:visited*/
  /*
        .btn:hover  => When the button is over the element
        box-shadow: 2px 15px 50px rgba(0,0,0,.5); => x y blur color
    */
  /*
        .btn:active => when the button is clicked
        transform: translateY(-1px); => -1px is relative to the initial state
    */
  /*
        .btn-white::after => we want the background-color white for only the btn-white.
    */
  /*
        .btn::after => adds like a virtual element right after the element that were selected. Then we can style the element.
        content: ""; => this is always necessary. It doesn't matter it is empty (""), but there must be specified
        display: inline-block; => this must be specified. We want the same as the btn thats why it is inline-block.
        height: 100%;
        width: 100%;    => will be exactly same with the button.
        border-radius: 100px; => will be exactly same with the button.
        position: absolute;
        top: 0;
        left: 0;    => relative to the first parent element whose position is "relative". In this case :button.
        z-index: -1; => defines the position of elements if they are one of top on an other.
    */
  /*
        animation-fill-mode: backwards;=> applys the 0% of animation before the animation starts. So the button will not be visible at the beginning
    */ }
  .btn, .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    transition: all .2s;
    position: relative;
    font-size: 1.6rem;
    border: none;
    cursor: pointer; }
  .btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /*
            We want to make it bigger and see just only when hover the button
        */
    /*.btn:hover::after*/ }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active, .btn:focus {
    outline: none;
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn--green {
    background-color: #55c57a;
    color: #fff; }
    .btn--green::after {
      background-color: #55c57a; }
  .btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s; }
  .btn--animated {
    animation: moveInBottom .5s ease-out .75s;
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all .2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0); }

/*
    perspective: 150rem; => The perspective must be in the parent of the element who is being rotated
                : The pixels need to be very high. For so, it is 150rem
    -moz-perspective: 150rem; => To make perspective work in Firefox
    backface-visibility: hidden; => We will no longer see the back side of the card.
    height: 52rem; => when we use position:absolute, all the elements are float and looses the height. So we have to specifiy its height
    overflow: hidden; => if we don't use this, the image overlaps the curves of the borders. So use it for the border radius
 */
.card {
  perspective: 150rem;
  -moz-perspective: 150rem;
  position: relative;
  height: 52rem;
  /*
        .card:hover .card_side--front => when we hover the card card-side__front  will be transformed
     */
  /*
        background-blend-mode: screen; => blend the gradient color and image for the background of the card
                Doesn't work in IE, but works in Chrome, Safari, Firefox
        clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%); => we can also use circle, etc instead of polygon for clip.
     */
  /*
        box-decoration-break: clone; => When the text goes to 2 lines, the paddings should be applied to both lines of the text.
                we use thie box decoration in order to show browser to treat both lines as different elements, and so we can see the paddings
                in both lines. One element, two boxes and they are both decorated with css, for here padding.
     */
  /*
        margin: 0 auto; => To center a block element inside a block element
     */
  /*
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
                => centers in both directions, vertically and horizontally
     */ }
  .card__side {
    height: 52rem;
    transition: all .8s ease;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    backface-visibility: hidden;
    border-radius: 20px;
    overflow: hidden;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15); }
    .card__side--front {
      background-color: #fff; }
    .card__side--back {
      transform: rotateY(180deg); }
      .card__side--back-1 {
        background-image: linear-gradient(to right bottom, #ffb900, #ff7730); }
      .card__side--back-2 {
        background-image: linear-gradient(to right bottom, #7ed56f, #28b485); }
      .card__side--back-3 {
        background-image: linear-gradient(to right bottom, #2998ff, #5643fa); }
  .card:hover .card__side--front {
    transform: rotateY(-180deg); }
  .card:hover .card__side--back {
    transform: rotateY(0); }
  .card__picture {
    background-size: cover;
    height: 23rem;
    background-blend-mode: darken;
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%); }
    .card__picture--1 {
      background-image: linear-gradient(to right bottom, #ffb900, #ff7730), url(../../img/nat-5.jpg); }
    .card__picture--2 {
      background-image: linear-gradient(to right bottom, #7ed56f, #28b485), url(../../img/nat-6.jpg); }
    .card__picture--3 {
      background-image: linear-gradient(to right bottom, #2998ff, #5643fa), url(../../img/nat-7.jpg); }
  .card__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    text-align: right;
    color: #fff;
    position: absolute;
    top: 12rem;
    right: 2rem;
    width: 75%; }
  .card__heading-span {
    padding: 1rem 1.5rem;
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone; }
    .card__heading-span--1 {
      background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.85), rgba(255, 119, 48, 0.85)); }
    .card__heading-span--2 {
      background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.85), rgba(40, 180, 133, 0.85)); }
    .card__heading-span--3 {
      background-image: linear-gradient(to right bottom, rgba(41, 152, 255, 0.85), rgba(86, 67, 250, 0.85)); }
  .card__details {
    padding: 3rem; }
    .card__details ul {
      list-style: none;
      width: 80%;
      margin: 0 auto; }
      .card__details ul li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem; }
        .card__details ul li:not(:last-child) {
          border-bottom: 1px solid #eee; }
  .card__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    text-align: center; }
  .card__price-box {
    text-align: center;
    color: #fff;
    margin-bottom: 8rem; }
  .card__price-only {
    font-size: 1.4rem;
    text-transform: uppercase; }
  .card__price-value {
    font-size: 6rem;
    font-weight: 100; }
